import { ApplicationCommandOptionType, ApplicationCommandType, ButtonStyle, ChannelType, ChatInputApplicationCommandData, Colors, CommandInteraction, ComponentType, MessageComponentInteraction, TextChannel } from 'discord.js';
import { MAX_CHANNEL_NAME, MAX_THREAD_NAME } from '../constants.js';
import { trunc } from '../library/factory.js';

export const data: ChatInputApplicationCommandData = {
    type: ApplicationCommandType.ChatInput,
    name: 'box',
    description: 'Post a comment box to collect responses',
    options: [
        {
            name: 'prompt',
            type: ApplicationCommandOptionType.String,
            description: 'A question or statement',
            required: true,
            minLength: 5,
            max_length: MAX_CHANNEL_NAME
        }
    ]
};

const COLOR_SWATCH: number[] = [
    Colors.Aqua, Colors.Green, Colors.Blue, Colors.Purple, Colors.LuminousVividPink, Colors.Gold, Colors.Orange, Colors.Red,
    Colors.DarkAqua, Colors.DarkGreen, Colors.DarkBlue, Colors.DarkPurple, Colors.DarkVividPink, Colors.DarkGold, Colors.DarkOrange, Colors.DarkRed,
];

export async function execute (interaction: CommandInteraction): Promise<void> {
    if (!(interaction.channel instanceof TextChannel))
        throw 'This command can only be used in text channels.';

    const prompt = trunc(interaction.options.get('prompt')?.value as string, MAX_THREAD_NAME);

    const thread = await interaction.channel.threads.create({
        name: prompt,
        type: ChannelType.PrivateThread
    });

    await thread.join();
    await thread.members.add(interaction.user);

    const start_message = await thread.send({
        embeds: [
            {
                title: 'Comment Box',
                description: prompt,
                color: COLOR_SWATCH[Math.floor(Math.random() * COLOR_SWATCH.length)]
            }
        ],
        components: [
            {
                type: ComponentType.ActionRow,
                components: [
                    { type: ComponentType.Button, style: ButtonStyle.Primary, label: 'Respond', custom_id: 'box_respond_name' },
                    { type: ComponentType.Button, style: ButtonStyle.Secondary, label: 'Pseudonymous', custom_id: 'box_respond_pseudo', },
                    { type: ComponentType.Button, style: ButtonStyle.Secondary, label: 'Anonymous', custom_id: 'box_respond_anon' }
                ]
            }
        ]
    });
}

export async function proceed (interaction: MessageComponentInteraction): Promise<void> {
    let name: string;
    if (interaction.customId == 'box_respond_name')
        name = interaction.user.displayName;
    else if (interaction.customId == 'box_respond_pseudo')
        name = 'Pseudonym'; // TODO generate these
    else if (interaction.customId == 'box_respond_anon')
        name = 'Anonymous';
    else
        throw `Unrecognized component identifier ${interaction.customId}.`;

    const response = 'asdf' + Math.floor(Math.random()*100); // TODO modal

    console.debug(interaction.message.thread);

    await interaction.reply({
        content: `You responded with: ${response}`,
        ephemeral: true
    });
}
